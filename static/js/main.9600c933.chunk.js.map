{"version":3,"sources":["Components/Todolist/Todolist.js","Components/Addlist/Addlist.js","App.js","serviceWorker.js","index.js"],"names":["Todolist","props","users","items","deletitem","theitem","length","map","item","key","Math","random","className","id","name","hours","onClick","Addlist","state","handelchange","e","setState","target","value","handelsubmit","preventDefault","addlist","onSubmit","this","type","placeholder","onChange","Component","App","user","filter","push","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4OAiCeA,EA9BC,SAACC,GACb,IAAMC,EAAMD,EAAME,MACXC,EAAWH,EAAXG,UAEDC,EADOH,EAAMI,OACKJ,EAAMK,KAAI,SAAAC,GAC9B,OACI,yBAAKC,IAAmB,GAAdC,KAAKC,SAAaC,UAAU,YAClC,0BAAMA,UAAU,OAAhB,IAAwBJ,EAAKK,GAA7B,KACA,0BAAMD,UAAU,QAAhB,IAAyBJ,EAAKM,KAA9B,KACA,0BAAMF,UAAU,SAAhB,IAA0BJ,EAAKO,MAA/B,KACA,0BAAMH,UAAU,cAAcI,QAAS,kBAAIZ,EAAUI,EAAKK,MAA1D,cAIR,iDAEJ,OACI,yBAAKD,UAAU,QACX,yBAAKA,UAAU,OACf,0BAAMA,UAAU,aAAhB,MACA,0BAAMA,UAAU,aAAhB,UACA,0BAAMA,UAAU,cAAhB,SACA,0BAAMA,UAAU,WAAhB,SAICP,ICeEY,E,2MAvCXC,MAAM,CACFL,GAAG,GACHC,KAAK,GACLC,MAAM,I,EAGVI,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAEE,OAAOT,GAAMO,EAAEE,OAAOC,S,EAIjCC,aAAe,SAACJ,GAEZ,GADAA,EAAEK,iBACwB,KAAtBL,EAAEE,OAAOT,GAAGU,OAAsC,KAAtBH,EAAEE,OAAOR,KAAKS,OAAqC,KAAvBH,EAAEE,OAAOP,MAAMQ,MACvE,OAAO,EAEV,EAAKtB,MAAMyB,QAAQ,EAAKR,OACxB,EAAKG,SAAS,CACVR,GAAG,GACHC,KAAK,GACLC,MAAM,M,wEAMX,OACI,yBAAKH,UAAU,OACX,0BAAMe,SAAUC,KAAKJ,cACjB,2BAAOK,KAAK,SAASC,YAAY,MAAMC,SAAUH,KAAKT,aAAcN,GAAG,KAAKU,MAAOK,KAAKV,MAAML,KAC9F,2BAAOgB,KAAK,OAAOC,YAAY,aAAaC,SAAUH,KAAKT,aAAcN,GAAG,OAAOU,MAAOK,KAAKV,MAAMJ,OACrG,2BAAOe,KAAK,SAASC,YAAY,QAAQC,SAAUH,KAAKT,aAAcN,GAAG,QAAOU,MAAOK,KAAKV,MAAMH,QAClG,2BAAOc,KAAK,SAASN,MAAM,MAAMV,GAAG,c,GAnClCmB,aCuCPC,G,iNAlCbf,MAAQ,CACNf,MAAQ,CACN,CAACU,GAAG,EAAEC,KAAK,YAAYC,MAAM,KAC7B,CAACF,GAAG,EAAEC,KAAK,UAAUC,MAAM,KAC3B,CAACF,GAAG,EAAEC,KAAK,UAAUC,MAAM,O,EAI/BX,UAAY,SAACS,GACX,IAAIqB,EAAK,EAAKhB,MAAMf,MAAMgC,QAAO,SAAA3B,GAAI,OAAEA,EAAKK,KAAMA,KAClD,EAAKQ,SAAS,CAAClB,MAAM+B,K,EAGvBR,QAAS,SAAClB,GAAQ,IACXL,EAAO,EAAKe,MAAZf,MACLA,EAAMiC,KAAK5B,GACX,EAAKa,SAAS,CAAClB,W,wEAKf,OACE,qCAAKS,UAAU,OAAf,YAA+B,aAC7B,4CAEA,kBAAC,EAAD,CAAUT,MAAOyB,KAAKV,MAAMf,MAAOC,UAAWwB,KAAKxB,YACnD,kBAAC,EAAD,CAASsB,QAASE,KAAKF,e,GA5BbM,cCMEK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9600c933.chunk.js","sourcesContent":["import React , {Component} from 'react';\r\nimport './Todolist';\r\n\r\nconst Todolist =(props)=> {\r\n    const users=props.items;\r\n    const {deletitem}=props;\r\n    const length=users.length\r\n    const theitem=length ? (users.map(item => {\r\n        return(\r\n            <div key={Math.random()*10} className='todolist'>\r\n                <span className='num'> {item.id} </span>\r\n                <span className='name'> {item.name} </span>\r\n                <span className='hours'> {item.hours} </span>\r\n                <span className='action icon' onClick={()=>deletitem(item.id)}> &times; </span>\r\n            </div>\r\n        )\r\n    })) : (\r\n        <p>There is no action</p>\r\n    )\r\n    return(\r\n        <div className='todo'>\r\n            <div className='bar'>\r\n            <span className='num blue '>Id</span>\r\n            <span className='name blue'>Action</span>\r\n            <span className='hours blue'>Hours</span>\r\n            <span className='action '>Dele</span>\r\n\r\n            </div>\r\n           \r\n            {theitem}\r\n        </div>\r\n    )\r\n}\r\nexport default Todolist;","import React , {Component} from 'react';\r\nimport './Addlist';\r\n\r\nclass Addlist extends Component {\r\n\r\n    state={\r\n        id:'',\r\n        name:'',\r\n        hours:''\r\n    }\r\n\r\n    handelchange = (e) => {\r\n        this.setState ({\r\n            [e.target.id] : e.target.value\r\n        })\r\n    }\r\n\r\n    handelsubmit = (e) => {\r\n        e.preventDefault();\r\n        if (e.target.id.value === '' || e.target.name.value==='' || e.target.hours.value===''){\r\n            return false\r\n        }else{\r\n         this.props.addlist(this.state)\r\n         this.setState({\r\n             id:'',\r\n             name:'',\r\n             hours:''\r\n         })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className='add'>\r\n                <form onSubmit={this.handelsubmit}>\r\n                    <input type='number' placeholder='num' onChange={this.handelchange} id='id' value={this.state.id} />\r\n                    <input type='text' placeholder='Add Action' onChange={this.handelchange} id='name' value={this.state.name}/>\r\n                    <input type='number' placeholder='Hours' onChange={this.handelchange} id='hours'value={this.state.hours} />\r\n                    <input type='submit' value='Add' id='act' />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Addlist;","import React, { Component } from 'react';\nimport Todolist from './Components/Todolist/Todolist';\nimport Addlist from './Components/Addlist/Addlist';\nimport './App.css';\n\n\nclass App extends Component {\n\n  state = {\n    items : [\n      {id:1,name:'Breakfast',hours:'1'},\n      {id:2,name:'Resting',hours:'1'},\n      {id:3,name:'Studing',hours:'3'},\n    ]\n  }\n\n  deletitem = (id) => {\n    let user=this.state.items.filter(item=>item.id !==id);\n    this.setState({items:user})\n  }\n\n  addlist =(item)=>{\n    let {items}=this.state;\n    items.push(item)\n    this.setState({items})\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\" className='container'>\n        <h1>ToDoList App</h1>\n        \n        <Todolist items={this.state.items} deletitem={this.deletitem}/>\n        <Addlist addlist={this.addlist} />\n  \n      </div>\n    );\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}